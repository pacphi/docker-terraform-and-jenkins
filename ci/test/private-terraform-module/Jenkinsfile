pipeline {
    agent any

    environment {
        MODULE_FOLDER = "sample/source-from-private-repo"
        MODULE_ROOT = "terraform/$MODULE_FOLDER"
        GIT_CREDENTIALS_ID = "git-personal-access-token"
    }

    stages {

        stage("clone source") {
            steps {
                cleanWs()
                git branch: "main", url: "https://github.com/pacphi/docker-terraform-and-jenkins.git"
            }
        }

        stage("invoke terraform") {
            agent {
                docker {
                    image 'hashicorp/terraform:light'
                    args  '--rm -e HOME=/tmp --entrypoint='
                    reuseNode true
                }
            }
            steps {
                script{
                    withCredentials([usernamePassword(credentialsId: "${env.GIT_CREDENTIALS_ID}", passwordVariable: 'GH_TOKEN', usernameVariable: 'GH_USER')]) {
                        def credHelper = "#!/bin/sh\n"
                        credHelper += "echo username=${GH_USER}\n"
                        credHelper += "echo password=${GH_TOKEN}\n"
                        
                        dir("${env.MODULE_ROOT}") {
                            writeFile(file: "${env.WORKSPACE}/${env.MODULE_ROOT}/credentials.sh", text: credHelper)
                            sh("chmod +x ${env.WORKSPACE}/${env.MODULE_ROOT}/credentials.sh")
                            sh("git config --global credential.helper \"${env.WORKSPACE}/${env.MODULE_ROOT}/credentials.sh\"")

                            sh('terraform init')
                            sh('terraform plan -out terraform.plan')
                            sh('terraform apply -auto-approve terraform.plan')
                        }
                    }
                }
            }
        }
    }
    
    post {
        // Always runs. And it runs before any of the other post conditions.
        always {
            // Wipe out the workspace before we finish!
            deleteDir()
        }
    }

    // The options directive is for configuration that applies to the whole job.
    options {
        // Make sure we only keep 10 builds at a time, so we don't fill up our storage!
        buildDiscarder(logRotator(numToKeepStr:'10'))
        
        // And we'd really like to be sure that this build doesn't hang forever, so
        // let's time it out after 30 minutes.
        timeout(time: 30, unit: 'MINUTES')
    }
}