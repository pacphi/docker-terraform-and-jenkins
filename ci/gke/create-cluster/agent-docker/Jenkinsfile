pipeline {
    agent any

    environment {
        CLOUDSDK_CONFIG = "${env.WORKSPACE}"
        JENKINS_CREDENTIALS_ID = "sa-gcloud"
        CREDENTIALS_BUCKET = "gs://sa-credentials-a094929"
        SECRETS_BUCKET = "gs://terraform-secrets-a094929"
        VARS_BUCKET = "gs://terraform-vars-a094929"
        MODULE_FOLDER = "clusters/gke"
        MODULE_ROOT = "terraform/$MODULE_FOLDER"
    }

    stages {

        stage("clone source") {
            steps {
                cleanWs()
                // TODO consider replacing with [checkout scm] as described here: https://support.cloudbees.com/hc/en-us/articles/226122247-How-to-Customize-Checkout-for-Pipeline-Multibranch-
                git branch: "main", url: "https://github.com/pacphi/docker-terraform-and-jenkins.git"
            }
        }

        stage("fetch sensitive configuration") {
            agent {
                // @see https://stackoverflow.com/questions/44206339/jenkins-declarative-pipeline-docker-registry if you would like to adapt the params below to source container image from private registry
                docker {
                    image 'gcr.io/google.com/cloudsdktool/cloud-sdk:latest'
                    args  '--rm -e HOME=/tmp'
                    reuseNode true
                }
            }
            steps {
                // this service account has only permissions to read from cloud storage buckets
                // @see https://stackoverflow.com/questions/45355007/how-to-authenticate-with-a-google-service-account-in-jenkins-pipeline
                withCredentials([file(credentialsId: "$JENKINS_CREDENTIALS_ID", variable: 'JSON_KEY')]) {
                    dir("${env.MODULE_ROOT}") {
                        sh('cp -f ${JSON_KEY} gcp-service-account.json')
                        // emit details of container image we're employing
                        sh('gcloud version')
                        // authentication and activation of the service account that will read (and download files) from cloud storage buckets
                        sh('gcloud auth activate-service-account --key-file=gcp-service-account.json')
                        // @see https://cloud.google.com/storage/docs/gsutil/commands/cp
                        // user-supplied configuration that will drive terraform module
                        // this configuration would have been defined in an upstream parameterized pipeline (with defaults) whose duty it is to upload to the bucket
                        // parameters are per job resulting in idempotent creation of resources
                        sh("gsutil cp $VARS_BUCKET/$MODULE_FOLDER/terraform.tfvars .")
                        // sets up where we will manage terraform state
                        // the backend subpath is user supplied in upstream parameterized pipeline, and is married with operator defined constants, only the subpath will vary per job 
                        sh("gsutil cp $VARS_BUCKET/$MODULE_FOLDER/backend.tf .")
                        // this service account differs from $JENKINS_CREDENTIALS_ID in that it will have elevated permissions to create resources as defined in terraform module; overwrites prior copy of service account file
                        sh("gsutil cp $CREDENTIALS_BUCKET/gcp-service-account.json .")
                    }
                }
            }
        }

        stage("invoke terraform") {
            agent {
                // @see https://stackoverflow.com/questions/55930244/jenkinsfile-to-run-terraform
                // @see https://stackoverflow.com/questions/44206339/jenkins-declarative-pipeline-docker-registry if you would like to adapt the params below to source container image from private registry
                docker {
                    image 'hashicorp/terraform:light'
                    args  '--rm -e HOME=/tmp --entrypoint='
                    reuseNode true
                }
            }
            steps {
                dir("${env.MODULE_ROOT}") {
                    sh('terraform init')
                    sh('terraform plan -out terraform.plan')
                    sh('terraform apply -auto-approve terraform.plan')
                }
            }
            post {
                success {
                    withCredentials([file(credentialsId: "$JENKINS_CREDENTIALS_ID", variable: 'JSON_KEY')]) {
                        dir("${env.MODULE_ROOT}") {
                            // upload ./kube/config to secrets cloud storage bucket
                            sh("gsutil cp config $SECRETS_BUCKET/config")
                        }
                    }
                }
            }
        }
    }
    
    post {
        // Always runs. And it runs before any of the other post conditions.
        always {
            // Wipe out the workspace before we finish!
            deleteDir()
        }
    }
    
    // The options directive is for configuration that applies to the whole job.
    options {
        // Make sure we only keep 10 builds at a time, so we don't fill up our storage!
        buildDiscarder(logRotator(numToKeepStr:'10'))
        
        // And we'd really like to be sure that this build doesn't hang forever, so
        // let's time it out after 30 minutes.
        timeout(time: 30, unit: 'MINUTES')
    }
}